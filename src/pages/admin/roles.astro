---
export const prerender = false;

import AdminLayout from '../../layouts/AdminLayout.astro';
import { supabaseAdmin } from '../../lib/supabaseAdmin';

const pageTitle = "Manage Roles";

// --- Auth: get current user from sb-access-token cookie ---
const accessToken = Astro.cookies.get('sb-access-token')?.value;
let user = null;
if (accessToken) {
  const { data, error } = await supabaseAdmin.auth.getUser(accessToken);
  if (error) console.error('Supabase getUser error:', error.message);
  user = data.user;
}
if (!user) throw Astro.redirect('/login');

// --- DB-based admin check (no metadata trust) ---
const { data: myRoleRows, error: myRoleErr } = await supabaseAdmin
  .from('user_roles')
  .select('roles(name)')
  .eq('user_id', user.id);

if (myRoleErr) {
  console.error('admin check error:', myRoleErr.message);
  throw Astro.redirect('/dashboard');
}
const isAdmin = (myRoleRows || []).some(r =>
  Array.isArray(r.roles) ? r.roles.some(x => x.name === 'administrator') : r.roles?.name === 'administrator'
);
if (!isAdmin) throw Astro.redirect('/dashboard');

// --- Load users, roles, and user_roles ---
const { data: usersData, error: usersError } = await supabaseAdmin.auth.admin.listUsers();
const users = usersData?.users || [];

const { data: rolesData, error: rolesError } = await supabaseAdmin
  .from('roles')
  .select('id, name')
  .order('name', { ascending: true });
if (rolesError) console.error(rolesError);

const { data: userRolesData, error: userRolesError } = await supabaseAdmin
  .from('user_roles')
  .select('user_id, role_id');
if (userRolesError) console.error(userRolesError);

// Map user_id -> [role_id]
const userRolesMap: Record<string, string[]> = {};
(userRolesData || []).forEach(ur => {
  if (!userRolesMap[ur.user_id]) userRolesMap[ur.user_id] = [];
  userRolesMap[ur.user_id].push(ur.role_id);
});

// Success banner via ?success=1
const showSuccess = new URL(Astro.request.url).searchParams.get('success') === '1';
---

<AdminLayout pageTitle={pageTitle}>

    <div class="flex items-center justify-between">
      <h1 class="text-2xl font-bold mb-5"><i class="bi bi-people-fill"></i> Manage Roles</h1>
    </div>


    {showSuccess && (
      <div class="bg-green-600/90 text-white p-2 rounded">Changes saved successfully.</div>
    )}

    {usersError && <p class="bg-red-700/70 p-2 rounded">Error loading users: {usersError.message}</p>}
    {rolesError && <p class="bg-red-700/70 p-2 rounded">Error loading roles: {rolesError.message}</p>}

    <!-- Section 1: Manage Roles -->
    <section class="bg-gray-300 p-4 rounded-lg space-y-3 mb-3">

      <div class="flex gap-2">
        <input
          type="text"
          id="newRoleName"
          placeholder="New role name (e.g. editor)"
          class="bg-white text-black p-2 rounded flex-1"
        />
        <button
          type="button"
          id="addRoleBtn"
          class="bg-green-600 text-white px-4 py-2 rounded acornblue"
        >
          Add Role
        </button>
      </div>

      <table class="w-full text-left border-collapse">
        <thead>
          <tr class="text-black">
            <th class="border-b border-gray-700 p-2 w-2/3">Role</th>
            <th class="border-b border-gray-700 p-2 w-1/3">Actions</th>
          </tr>
        </thead>
        <tbody>
          {rolesData?.map(r => (
            <tr>
              <td class="border-b border-gray-700 p-2">{r.name}</td>
              <td class="border-b border-gray-700 p-2">
                <button
                  type="button"
                  class="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded deleteRoleBtn"
                  data-roleid={r.id}
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
          {(!rolesData || rolesData.length === 0) && (
            <tr><td class="p-3 text-gray-400" colspan="2">No roles yet. Add one above.</td></tr>
          )}
        </tbody>
      </table>
    </section>

    <!-- Section 2: Assign Roles to Users -->
    <section class="bg-gray-300 p-4 rounded-lg space-y-3">
      <h2 class="text-xl font-semibold">Assign Roles to Users</h2>

      <form id="rolesForm">
        <div class="overflow-x-auto">
          <table class="w-full text-left border-collapse">
            <thead>
              <tr class="text-black">
                <th class="border-b border-gray-700 p-2 min-w-[240px]">Email</th>
                {rolesData?.map(r => (
                  <th class="border-b border-gray-700 p-2 text-center">{r.name}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {users.map(u => {
                const assigned = userRolesMap[u.id] || [];
                return (
                  <tr data-userid={u.id}>
                    <td class="border-b border-gray-700 p-2">{u.email}</td>
                    {rolesData?.map(r => (
                      <td class="border-b border-gray-700 p-2 text-center">
                        <!-- value = role NAME (API expects names); checked = assigned ID -->
                        <input type="checkbox" value={r.name} checked={assigned.includes(r.id)} />
                      </td>
                    ))}
                  </tr>
                );
              })}
              {users.length === 0 && (
                <tr><td class="p-3 text-gray-400" colspan={(rolesData?.length || 0) + 1}>No users.</td></tr>
              )}
            </tbody>
          </table>
        </div>

        <div class="pt-3">
          <button type="button" id="saveRolesBtn" class="bg-blue-600 text-white px-4 py-2 rounded acornblue">
            Save All Changes
          </button>
        </div>
      </form>
    </section>

    <script is:inline>
      // --- Add Role ---
      document.getElementById('addRoleBtn')?.addEventListener('click', async () => {
        const input = document.getElementById('newRoleName');
        const roleName = input?.value?.trim();
        if (!roleName) return alert('Enter a role name');

        try {
          const res = await fetch('/api/roles', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: roleName })
          });
          const text = await res.text();
          if (res.ok) window.location.href = '/admin/roles?success=1';
          else alert(text || 'Failed to add role.');
        } catch (err) {
          alert('Unexpected error: ' + err);
        }
      });

      // --- Delete Role ---
      document.querySelectorAll('.deleteRoleBtn')?.forEach(btn => {
        btn.addEventListener('click', async () => {
          const roleId = btn.getAttribute('data-roleid');
          if (!roleId) return;
          if (!confirm('Delete this role? This will unassign it from all users.')) return;

          try {
            const res = await fetch(`/api/roles/${roleId}`, { method: 'DELETE' });
            const text = await res.text();
            if (res.ok) window.location.href = '/admin/roles?success=1';
            else alert(text || 'Failed to delete role.');
          } catch (err) {
            alert('Unexpected error: ' + err);
          }
        });
      });

      // --- Save All Changes ---
      document.getElementById('saveRolesBtn')?.addEventListener('click', async () => {
        const form = document.getElementById('rolesForm');
        const usersPayload = {};
        form.querySelectorAll('tbody tr[data-userid]')?.forEach(tr => {
          const userId = tr.getAttribute('data-userid');
          const rolesForUser = [];
          tr.querySelectorAll('input[type="checkbox"]')?.forEach(cb => {
            if (cb.checked) rolesForUser.push(cb.value); // send role NAMES
          });
          usersPayload[userId] = rolesForUser;
        });

        try {
          const res = await fetch('/api/update-roles', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ users: usersPayload })
          });
          const text = await res.text();
          if (res.ok) window.location.href = '/admin/roles?success=1';
          else alert(text || 'Failed to update roles.');
        } catch (err) {
          alert('Unexpected error: ' + err);
        }
      });
    </script>
</AdminLayout>